//05-æ ‘8 File Transfer 
#include<stdio.h>
#include<stdlib.h>
void Input_Connection(int* s);
void Initialization(int* s,int n);
void Check_Connection(int* s);
int Find(int*s, int x);
void Count_Connection(int*s,int n);
int main(){
	int n,i;
	char in;
	scanf("%d",&n);
	int* s=(int *)malloc(n*sizeof(int));
	Initialization(s,n);	
	do{
		scanf("\n%c",&in);
		switch(in){
			case 'S': break;
			case 'C': Check_Connection(s);break;
			case 'I': Input_Connection(s);break;
		}
	}while(in!='S');
	Count_Connection(s,n);
	return 0;
} 
void Input_Connection(int* s){
	int c1,c2,Root1,Root2;
	scanf("%d %d",&c1,&c2);
	Root1=Find(s,c1-1);
	Root2=Find(s,c2-1);
	if(s[Root1]<s[Root2]) {
		s[Root1]+=s[Root2];
		s[Root2]=Root1;
	}
	else{
		s[Root2]+=s[Root1];
		s[Root1]=Root2;
	}
}
void Initialization(int* s,int n){
	for(int i=0;i<n;i++){
		s[i]=-1;
	}		
}
void Check_Connection(int* s){
	int c1,c2,Root1,Root2;
	scanf("%d %d",&c1,&c2);
	Root1=Find(s,c1-1);
	Root2=Find(s,c2-1);
	if(Root1!=Root2) printf("no\n");
	else printf("yes\n");
}
int Find(int*s, int x){	
	if(s[x]<0) return x;
	else return s[x]=Find(s,s[x]); 
}
void Count_Connection(int*s,int n){
	int i,cnt=0;
	for(i=0;i<n;i++){
		if(s[i]<0) cnt++;
	} 
	if(cnt==1) printf("The network is connected.\n");
	else printf("There are %d components.",cnt);
} 